// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  username          String       @unique
  password          String
  ingredientsOnHand Ingredient[]
  groceryList       GroceryList? // store the grocery list for a user
}

model Ingredient {
  id             Int          @id @default(autoincrement())
  ingredientName String
  quantity       Int
  aisle          String?
  productImage   String?
  expiration     DateTime?
  estimatedCost  Decimal?
  userId         Int // if ingredient is an ingredient a user owns
  user           User         @relation(fields: [userId], references: [id])
  groceryListId  Int?
  groceryList    GroceryList? @relation(fields: [groceryListId], references: [id])
}

// many to many relationship
// https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations
// recipe can be stored in what the user will make throughout the week, their "to make" list
model Recipe {
  id                                 Int     @id @default(autoincrement()) // store the id number from spoonacular api, otherwise id is auto incremented (part of the users database)
  recipeTitle                        String
  previewImage                       String? // if image not provided, generic image will be presented
  servings                           Int
  dietaryPreferencesAndIntollerences String?
  ingredientsNeeded                  Json[] // from spoonacular api
  sourceUrl                          String
  totalCost                          Decimal // total cost of ingredients to create
  instructions                       Json[] // store json return of steps
}

model GroceryList {
  id     Int          @id @default(autoincrement())
  toBuy  Ingredient[]
  userId Int @unique
  user   User         @relation(fields: [userId], references: [id])
}
