// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement()) // uid generated by firebase
  firebaseId       String            @unique
  email            String            @unique
  userName         String            @default("User")
  intolerances     String[]
  diets            String[]
  ownedIngredients OwnedIngredient[]
  groceryList      Json?
  groceryListCost  Decimal           @default(0.00)
  recipes          Recipe[]          @relation("PlannedRecipes")
  favoritedRecipes Recipe[]          @relation("FavoritedRecipes")
  editedRecipes    Recipe[]
}

model OwnedIngredient {
  userId         Int
  ingredientId   Int
  quantity       Decimal
  unit           String
  expirationDate String?
  user           User       @relation(fields: [userId], references: [id])
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([userId, ingredientId])
}

model Ingredient {
  id               Int               @id @default(autoincrement())
  ingredientName   String
  department       String
  productImage     String?
  ownedIngredients OwnedIngredient[]
}

// many to many relationship
// https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations
model Recipe {
  id                 Int      @id @default(autoincrement()) // store the id number from spoonacular api, otherwise id is auto incremented (part of the users database)
  apiId              Int
  originalSource     String
  editingAuthorName  String
  recipeTitle        String
  previewImage       String // if image not provided, generic image will be presented
  servings           Int
  ingredients        Json
  sourceUrl          String
  readyInMinutes     Int      @default(45)
  totalCost          Decimal? // total cost of ingredients to create for baseline servings
  instructions       String[]
  vegetarian         Boolean
  vegan              Boolean
  glutenFree         Boolean
  dairyFree          Boolean
  users              User[]   @relation("PlannedRecipes")
  usersThatFavorited User[]   @relation("FavoritedRecipes")
  editingAuthorId    Int?
  editingAuthor      User?    @relation(fields: [editingAuthorId], references: [id])


  @@unique([apiId, editingAuthorId])
}
