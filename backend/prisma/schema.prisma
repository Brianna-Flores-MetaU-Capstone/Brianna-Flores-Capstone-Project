// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement()) // uid generated by firebase
  firebaseId        String              @unique
  email             String              @unique
  userName          String              @default("User")
  intolerances      String[]
  diets             String[]
  ingredientsOnHand IngredientsOnHand[]
  groceryList       GroceryList? // store the grocery list for a user
}

model IngredientsOnHand {
  userId       Int
  ingredientId Int
  user         User       @relation(fields: [userId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id(name: "IngredientsOnHandId", [userId, ingredientId])
}

model Ingredient {
  id                   Int                 @id @default(autoincrement())
  ingredientName       String
  quantity             Int
  unit                 String
  department           String
  expirationDate       String?
  estimatedCostPerUnit Decimal?
  productImage         String?
  estimatedCost        Decimal?
  groceryListId        Int?
  ingredientsOnHand    IngredientsOnHand[]
  groceryList          GroceryList?        @relation(fields: [groceryListId], references: [id])
  recipeId             Int?
  recipe               Recipe?             @relation(fields: [recipeId], references: [id])

  @@unique([ingredientName, quantity, unit, department, expirationDate], name: "uniqueIngredient")
}

// many to many relationship
// https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations
// recipe can be stored in what the user will make throughout the week, their "to make" list
model Recipe {
  id                Int          @id @default(autoincrement()) // store the id number from spoonacular api, otherwise id is auto incremented (part of the users database)
  recipeTitle       String
  previewImage      String? // if image not provided, generic image will be presented
  servings          Int
  ingredientsNeeded Ingredient[]
  sourceUrl         String
  totalCost         Decimal // total cost of ingredients to create for baseline servings
  instructions      String[] // store json return of steps
  // intollerences
  containsDairy     Boolean?
  containsPeanuts   Boolean?
  containsSoy       Boolean?
  containsEgg       Boolean?
  containsSeafood   Boolean?
  containsSulfite   Boolean?
  containsGluten    Boolean?
  containsSesame    Boolean?
  containsTreeNut   Boolean?
  containsGrain     Boolean?
  containsShellfish Boolean?
  containsWheat     Boolean?
  // diets
  isVegetarian      Boolean
  isVegan           Boolean
}

model GroceryList {
  id        Int          @id @default(autoincrement())
  listName  String
  startDate DateTime
  endDate   DateTime
  toBuy     Ingredient[]
  userId    Int          @unique
  user      User         @relation(fields: [userId], references: [id])
}
